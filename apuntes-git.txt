git init = para iniciar o crear la repositorio(carpeta) de git en el directorio del proyecto que trabajara por versiones







git add = comando para agregar a staging el o los documentos/directorios seleccionados antes de poder realizar un commit 

	

	$git add "archivo"  -- tambien se puede usar . para asignar la carpeta actual para agregar






git commit = comando para agregar de forma definitiva al repositorio el o los documentos seleccionados mas los cambios efectuados en estos, es el comando que "crea" las "nuevas" versiones de los archivos modificados y agregarlos al repositorio.

	

	

	

	practica limpia: agregar siempre un comentario de los cambios efectuados al archivo para que cualquier persona con acceso al repositorio pueda entender que 	cambios se han realizado.






git rm --cached = comando para remover el archivo seleccionado de la memoria ram (staging) cuando esté habia sido agregado mediante el comando $git add pero sin haber efectuado aun el
 comando $git commit evitando asi agregar cambios no deseados al o los archivos de la rama seleccionados.
	
	
	tambien se entiende que el archivo seleccionado paso de tracked a untracked.
	el archivo se mantiene en el disco duro pero git es incapaz de agregarlo al repositorio aunque se realize $git commit -m "nota"

git rm --force = elimina de git y el disco duro el archivo
	se puede recuperar pero con comandos avanzados.

git restore --staged = recupera un archivo borrado con --force
	$git restore --staged prueba-borrar.txt


git config --global user.name "nombre de usuari" = comando para asignar nombre de usuario de git



git config --global user.email "nombre@correo.com" = comando para asignar correo electronico al usuario de git



git status = comando para visualisar el estado de los archivos (tracked o untracked) y si hay o no cambios que deban ser agregados mediante el comando $git commit



git log = comando para visualisar el historial de los commit realizados al archivo seleccionado (todas las versiones del mismo), tambien despliega el tag del commit de cada version para usos posteriores
	con otros comandos ...

	$git log --stat = comando que permite ver con mayor detalle los commits realizados asi como las carpetas y archivos que fueron modificados en cada commit.


git show = comando que muestra los ultimos cambios realizados al documento seleccionado, las descripciones que podemos ver con este comando son desde;

	el ultimo commit realizado

	el mensaje colocado en dicho commit

	las diferentes versiones del archivo

	cuantos bytes cambiaron
	contenido modificado en el archivo como la eliminacion de alguna palabra o por el contrario si se agrego algo nuevo

git diff = comando para ver las diferencias entre cambios realizados
	para comparar los cambios se debe seleccionar el tag del commit mostrado por el comando $git log archivo.txt de los 2 archivos que se quieren comparar.

	$git diff tagcommit tagcommit

git reset = comando para regresar en el tiempo, nos permite volver a una version anterior de nuestro repositorio sin importar que tan antigua sea la version
	basta con elegir el tagcommit de la version a la que queremos retornar.

	$git reset tagcommit --hard
		elimina todas las modificaciones al archivo seleccionado tomando como punto de "restauracion" el tagcommit seleccionado al igual que el historial del log
	
	$git reset tagcommit --soft
		elimina solo las entradas del historial log hasta el tagcommit seleccionado, las modificaciones realizadas al archivo seleccionado aun se mantienen pero no asi los commits realizados a posterior del tagcommit seleccionado.
		no elimina la informacion agregada a staging mediante $git add archivo.txt y, de hecho, permite agregar dichas modificaciones mediante commit si aun se quiere o eliminar usando rm.
	
	$git reset HEAD = sacar archivos de staging, no los borra, solo quita los ultimos cambios para no enviarlos en el ultimo commit
		a menos que se quieran agregar de nuevo con git add


git mv = si usamos el comando habitual para mover archivos dentro de la carpeta de nuestro proyecto el tracking de git se pierde
	pero si usamos este comando para mover archivos dentro de la carpeta que esta siendo monitoriada por git el tracking no se perdera.

git checkout = comando que nos permite visualisar la version de nuestra eleccion sin importar cuan antigua sea dicha version o commit eligiendo el tagcommit de nuestro interes desde lo desplegado con el comando $git log archivo.txt
	la ejecucion del comando no significa que el archivo elegido vaya a ser modificado con el contenido de dicha version

	$git checkout tagcommit archivo.txt
		nos permite visualisar el archivo seleccionado en la version que señala el tagcommit
		si quisieramos traer la version que elgimos junto al contenido de este mismo debemos usar commit pero esto tendra como resultado borrar todo cambio o avanze de la version mas actual y si eso es lo que se desea no hay problema
		 de lo contrario usar con precaucion

	$git checkout master archivo.txt 
		nos regresa a la version actual del archivo sin agregar modificaciones

sss












Glosario



repositorio = carpeta que contiene los cambios realizados a los archivos durante y al final del proyecto
	base de datos de cambios historicos






staging = espacio en la memoria ram donde se guardan de manera  temporal los archivos agregados mediante el comando $git add [carpeta seleccionada], para mover de la ram al disco duro o ubicacion del repositorio y guardar de forma definitiva los cambios usar $git commid -m "nota sobre los cambios

"





untracked = archivo que no a sido agregado a staging y por lo tanto git no puede saber si existe o tiene cambios







tracked = archivo que ha sido agregado a staging y por lo tanto git conoce de su exitencia y los cambios que se realizan







rama = hace referencia a las diferentes instancias del repositorio, 
la rama por default o principal es master( actualmente cambio a main), al crear mas ramas estas estaran basadas en la ultima actualizacion realizada al repositorio principal mediante $git commit -m
	
	

	

	
	se pueden hacer tantas ramas como se quiera o sea necesario
	
	
	tambien se pueden crear ramas de una version en especifico y no necesariamente de la ultima.







head = hace referncia a la version mas reciente en la rama

