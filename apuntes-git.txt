							Apuntes del curso de Git&GitHub

git init = para iniciar o crear la repositorio(carpeta) de git en el directorio del proyecto que trabajara por versiones

git add = comando para agregar a staging el o los documentos/directorios seleccionados antes de poder realizar un commit 

	$git add "archivo"  -- tambien se puede usar . para asignar la carpeta actual para agregar

git commit = comando para agregar de forma definitiva al repositorio el o los documentos seleccionados mas los cambios efectuados en estos, es el comando que "crea" las "nuevas" versiones de los archivos modificados y agregarlos al repositorio.

	practica limpia: agregar siempre un comentario de los cambios efectuados al archivo para que cualquier persona con acceso al repositorio pueda entender que 	cambios 	se han realizado.

git rm --cached = comando para remover el archivo seleccionado de la memoria ram (staging) cuando esté habia sido agregado mediante el comando $git add pero sin haber efectuado aun el
 comando $git commit evitando asi agregar cambios no deseados al o los archivos de la rama seleccionados.
	
	tambien se entiende que el archivo seleccionado paso de tracked a untracked.
	el archivo se mantiene en el disco duro pero git es incapaz de agregarlo al repositorio aunque se realize $git commit -m "nota"

git rm --force = elimina de git y el disco duro el archivo
	se puede recuperar pero con comandos avanzados.

git restore --staged = recupera un archivo borrado con --force
	$git restore --staged prueba-borrar.txt

git config --global user.name "nombre de usuari" = comando para asignar nombre de usuario de git

git config --global user.email "nombre@correo.com" = comando para asignar correo electronico al usuario de git

git status = comando para visualisar el estado de los archivos (tracked o untracked) y si hay o no cambios que deban ser agregados mediante el comando $git commit

git log = comando para visualisar el historial de los commit realizados al archivo seleccionado (todas las versiones del mismo), tambien despliega el tag del commit de cada version para usos posteriores
	con otros comandos ...

	$git log --stat = comando que permite ver con mayor detalle los commits realizados asi como las carpetas y archivos que fueron modificados en cada commit.
	$git log --all =muestra todo lo hecho historicamente
	$git log --all --graph = muestra todo lo hecho historicamente ademas de agregar de manera grafica las ramas
	$git log --all --graph --decorate --oneline = todo lo anterior pero de manera mas comprimida 

git show archivo = comando que muestra los ultimos cambios realizados al documento seleccionado, las descripciones que podemos ver con este comando son desde;
	nos indica donde estamos localizados (branch) señalando con HEAD dicha ubicacion
	el ultimo commit realizado
	el mensaje colocado en dicho commit
	las diferentes versiones del archivo
	cuantos bytes cambiaron
	contenido modificado en el archivo como la eliminacion de alguna palabra o por el contrario si se agrego algo nuevo

	$git show-ref --tags =nos muestra a que commit esta asignado el cada tag


git diff = comando para ver las diferencias entre cambios realizados
	para comparar los cambios se debe seleccionar el tag del commit mostrado por el comando $git log archivo.txt de los 2 archivos que se quieren comparar.

	$git diff tagcommit tagcommit

git reset = comando para regresar en el tiempo, nos permite volver a una version anterior de nuestro repositorio sin importar que tan antigua sea la version
	basta con elegir el tagcommit de la version a la que queremos retornar.

	$git reset tagcommit --hard
		elimina todas las modificaciones al archivo seleccionado tomando como punto de "restauracion" el tagcommit seleccionado al igual que el historial del log
	
	$git reset tagcommit --soft
		elimina solo las entradas del historial log hasta el tagcommit seleccionado, las modificaciones realizadas al archivo seleccionado aun se mantienen pero no asi 		los commits realizados a posterior del tagcommit seleccionado.
		no elimina la informacion agregada a staging mediante $git add archivo.txt y, de hecho, permite agregar dichas modificaciones mediante commit si aun se quiere 			eliminar usando rm.
	
	$git reset HEAD = sacar archivos de staging, no los borra, solo quita los ultimos cambios para no enviarlos en el ultimo commit
		a menos que se quieran agregar de nuevo con git add

git mv = si usamos el comando habitual para mover archivos dentro de la carpeta de nuestro proyecto el tracking de git se pierde
	pero si usamos este comando para mover archivos dentro de la carpeta que esta siendo monitoriada por git el tracking no se perdera.

git checkout = comando que nos permite visualisar la version de nuestra eleccion sin importar cuan antigua sea dicha version o commit eligiendo el tagcommit de nuestro interes desde lo desplegado con el comando $git log archivo.txt
	la ejecucion del comando no significa que el archivo elegido vaya a ser modificado con el contenido de dicha version

	$git checkout tagcommit archivo.txt
		nos permite visualisar el archivo seleccionado en la version que señala el tagcommit
		si quisieramos traer la version que elgimos junto al contenido de este mismo debemos usar commit pero esto tendra como resultado borrar todo cambio o avanze de 		la version mas actual y si eso es lo que se desea no hay problema
		de lo contrario usar con precaucion

	$git checkout master archivo.txt 
		nos regresa a la version actual del archivo sin agregar modificaciones

	$git checkout seleccionar-branch = nos permite movernos entre ramas

git clone url = comando que nos permite clonar la carpeta master del repositorio remoto en nuestro equipo, tanto el directorio de trabajo como el repositorio local junto a los cambios histricos se clonan igual

git push = envia todo cambio que hayamos realizado en nuestro repositorio local al repositorio remoto, tener en cuenta que puede saltar algun conflicto si varias personas editaron el mismo archivo pero con diferentes valores
	$git push origin main = enviamos el repositorio local ubicado en la rama/branch main al repositorio remoto donde tambien se ecuentra una rama/branch con el nombre main
	$git push origin --tags = envia los tags que tengamos en el repositorio local al repositorio remoto
			
	en este caso origin se refiere al repositorio remoto en github


git fetch = trae desde el repositorio remoto atualizaciones o modificaciones hechas en dicho repositorio a nuestro repositorio local pero no actualiza nuestro directorio de trabajo

git merge = actualiza nuestros archivos locales del directorio local con el repositorio local el cual se actualizo con fetch desde el repositorio remoto.
		fusion de la ultima version en repositorio local con nuestra vesrion actual
		tambien se utiliza para fusionar archivos modificados en ramas separadas a la rama principal, se suele usar desde experiementos para no dañar la rama principal o para solicionar problemas como bugs

git pull = fusion de los comandos fetch y merge
		mantiene una version actualizada del repositorio
		
		$git pull origin main = traemos del repositorio remoto a nuestra rama/branch main los archivos que aun no sincronizamos de forma local
		$git pull origin main --allow-unrelated-histories = fuersa la integracion de historias del origen remoto en el repositorio local 

git branch = nos muestra las ramas que tenemos en nuestro repositorio ademas de indicarnos la rama donde estamos localizados

git remote add origin "url" = comando para agregar un origen remoto, en este caso usamos una url de github

git remote set-url "repositorio" = nos permite cambiar la direccion del repositorio remoto usando la direcion y protocolos desdeados
								en nuestro caso se uso para cambiar la url https por una url ssh

		$git remote set-url "repositorio"
			remote -- se refiere al repositorio remoto
			set-url -- indica que se va a cambiar la direccion web donde esta el repositorio elegido
			repositorio -- indica si se cambiara la url de fetch o push, para cambiar ambos se usa el nombre del repositorio que aparece antes de fetch y push con el comando $git remote -v

ssh-keygen = comando para crear las llaves privadas y publicas

		$ssh-keygen -t rsa -b 4096 -C "user@email.com"
				-t indica el algoritmo que se va a usar
				-b que tan compleja sera la llave
				-C indica el correco al que estara conectada la llave

eval $(ssh-agent -s) = revisar si el servidor de llaves ssh esta prendido, este proceso se encarga de revisar que las llaves esten corriendo y realizar la conexion doble

ssh-add = agregar llave al entorno, que el sistema operativo sabe que la llave existe

git tag = permite visualisar los tags(versiones) que existen en nuestro repositorio, con esto nos referimos a otorgarle a algun tagcommit de nuestro log un tag en especifico
		como v1, v2, v2.3 en caso de que queramos, puede ser cualquier palabra en el tag no necesariamente v1 por ejemplo.

git tag -a version -m "nota" tagcommit= nos permite agregar versiones a nuestro repositorio con el nombre que queramos y agregar un comentario si lo deseamos

	$git tag -a ejemplo1.0 -m "esta version, ejemplo, sirve de ejemplo para el comando" numero-del-tag-commit-en-log

	$git push origin --tags = para enviar los tags creados en el repositorio local al repositorio remoto

	$git tag -d ejemplo1.0 = con este comando borramos el tag en nuestro repositorio local

		si queremos borrar el tag que se guardo en el repositorio remoto debemos usar push
	
	$git push origin :ref/tags/ejemplo1.0
		le indicamos al origen (repositorio remoto) que tome como referencia el tag de nuestro repositrio local conectando en ambos repositorios la indicacion donde se borró el tag 
		indicado en el comando $git tag -d 

	

			Glosario



repositorio = carpeta que contiene los cambios realizados a los archivos durante y al final del proyecto
	base de datos de cambios historicos

repositorio remoto = repositorio localizado de manera remota en algun servidor propio o alguno como github

staging = espacio en la memoria ram donde se guardan de manera  temporal los archivos agregados mediante el comando $git add [carpeta seleccionada], para mover de la ram al disco duro o ubicacion del repositorio y guardar de forma definitiva los cambios usar $git commid -m "nota sobre los cambios

untracked = archivo que no a sido agregado a staging y por lo tanto git no puede saber si existe o tiene cambios

tracked = archivo que ha sido agregado a staging y por lo tanto git conoce de su exitencia y los cambios que se realizan

rama = copia del ultimo commit y la rama por default o principal es master( actualmente cambio a main), al crear mas ramas estas estaran basadas en la ultima actualizacion 		realizada al repositorio principal mediante $git commit -m
	hace referencia a las diferentes instancias del repositorio
	se pueden hacer tantas ramas como se quiera o sea necesario
	tambien se pueden crear ramas de una version en especifico y no necesariamente de la ultima.

master = rama principal donde se encuentra toda la historia de commits

head = hace referncia a la version (commit) mas reciente en la rama

historias = conjunto de commits

llave publica = cifran el mensaje que se envia al propietario de la llave privada

llave privada = permite visualisar el mensaje cifrado por la llave publica

protocolo ssh = conexion segura utilizada de manera bidireccional usando llaves publicas y privadas de ambos usuarios.

passphrase = contraseña adicional de texto para la llave publica y privada

alias = se usan para ejecutar de manera mas rapida un conjunto de variables
		por ejemplo si debemos usar reiteradas veces el comando

			git log --all --graph --decorate --oneline

		sera ideal colocarle un alias a todo ese comando o conjunto de variables
			 
			 $alias nombre-del-alias="variables que se quieren guardar en el alias"
			 $alias arbolito="git log --all --graph --decorate --oneline"

		de esta forma cada vez que escribamos arbolito se ejecutara todo el comando colocado en comillas ""

		estos alias por lo general solo trabajan con la sesion actual de trabajo, si se cierra la sesion el alias y su configuracion desaparece pero es posible hacer de un alias un shortcut permanente.
